require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = process.env.ADMIN_ID; // –≤–∞—à Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const PLATEGA_API_KEY = process.env.PLATEGA_API_KEY; // X-Secret
const PLATEGA_SHOP_ID = process.env.PLATEGA_SHOP_ID; // X-MerchantId (merchant id)
const PORT = process.env.PORT || 5000;

if (!BOT_TOKEN || !ADMIN_ID || !PLATEGA_API_KEY || !PLATEGA_SHOP_ID) {
  console.error('ERROR: –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ BOT_TOKEN, ADMIN_ID, PLATEGA_API_KEY –∏ PLATEGA_SHOP_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
  process.exit(1);
}

const bot = new TelegramBot(BOT_TOKEN, { polling: true });
const app = express();
app.use(express.json({ limit: '200kb' }));

const DATA_FILE = path.join(__dirname, 'data.json');

function loadData() {
  if (fs.existsSync(DATA_FILE)) {
    try {
      const data = fs.readFileSync(DATA_FILE, 'utf8');
      return JSON.parse(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      return { payments: {}, users: {} };
    }
  }
  return { payments: {}, users: {} };
}

function saveData(data) {
  try {
    fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

let dataStore = loadData();
const userStates = {};

const IMAGES = {
  MAIN: './attached_assets/pick spt_1759573098998.jpg',
  HELP: './attached_assets/pick help (1)_1759573098998.jpg',
  FAQ: './attached_assets/picksher_1759573098998.jpg'
};

function sendMainMenu(chatId) {
  const message = `‚ùáÔ∏è*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Blesk !*‚ùáÔ∏è

*‚ùóÔ∏è–í–ê–ñ–ù–û‚ùóÔ∏è*
–ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥ –Ω–µ —Å–æ—Å—Ç–æ—è–ª –≤ —Å–µ–º–µ–π–Ω–æ–º –ø–ª–∞–Ω–µ!
–ï—Å–ª–∏ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–∞–ø–ø–æ—Ä—Ç!`;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (169 —Ä—É–±–ª–µ–π)', callback_data: 'buy' }],
      [{ text: 'üí¨ –°–∞–ø–ø–æ—Ä—Ç', callback_data: 'support' }],
      [{ text: '‚ùì FAQ', callback_data: 'faq' }]
    ]
  };

  if (fs.existsSync(IMAGES.MAIN)) {
    bot.sendPhoto(chatId, IMAGES.MAIN, {
      caption: message,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    }).catch(err => {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:', err);
      bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    });
  } else {
    bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }
}

/* --- Telegram handlers (unchanged, –Ω–µ–±–æ–ª—å—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è) --- */
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  delete userStates[chatId];
  sendMainMenu(chatId);
});

bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  bot.answerCallbackQuery(query.id);

  if (data === 'buy') {
    const message = `üìã *–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏:*

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Spotify, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—Å –∫ –ø–æ–¥–ø–∏—Å–∫–µ.

‚è± –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª–∏—Ç—Å—è *1 –º–µ—Å—è—Ü*

‚ö†Ô∏è –ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –≤—ã —Ä–∞–Ω—å—à–µ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∏ –≤ —Å–µ–º–µ–π–Ω–æ–º –ø–ª–∞–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏!`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 169 —Ä—É–±–ª–µ–π', callback_data: 'pay' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'menu' }]
      ]
    };

    bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } else if (data === 'pay') {
    let loadingMsg;
    try {
      loadingMsg = await bot.sendMessage(chatId, '‚è≥ –°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É...');

      const crypto = require('crypto');
      const localId = crypto.randomUUID(); // –Ω–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π id —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

      const paymentData = {
        id: localId,
        paymentMethod: 2,
        paymentDetails: {
          amount: 169,
          currency: 'RUB'
        },
        description: '–ü–æ–¥–ø–∏—Å–∫–∞ Spotify - 1 –º–µ—Å—è—Ü',
        return: 'https://t.me/blesk_spotify_bot',
        failedUrl: 'https://t.me/blesk_spotify_bot',
        payload: JSON.stringify({ chatId: chatId }),
        merchantId: PLATEGA_SHOP_ID // –¥—É–±–ª–∏—Ä—É—é merchantId –≤ —Ç–µ–ª–µ ‚Äî –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ endpoints —Ç—Ä–µ–±—É—é—Ç)
      };

      // URL: –∏—Å–ø–æ–ª—å–∑—É—é –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API endpoint (api.platega.io), –Ω–æ –µ—Å–ª–∏ —É –≤–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç app.platega.io ‚Äî –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å
      const PLATEGA_URL = 'https://api.platega.io/transaction/process';

      const response = await axios.post(PLATEGA_URL, paymentData, {
        headers: {
          'X-MerchantId': PLATEGA_SHOP_ID,
          'X-Secret': PLATEGA_API_KEY,
          'Content-Type': 'application/json'
        },
        timeout: 15000
      });

      // –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞: redirect, transactionId, transactionId –≤ —Ä–∞–∑–Ω–æ–π —Ñ–æ—Ä–º–µ
      const remoteTxId = response.data?.transactionId || response.data?.transaction?.transactionId || response.data?.id || null;
      const redirectUrl = response.data?.redirect || response.data?.payformSuccessUrl || null;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ id -> chatId –∏ also remote id –µ—Å–ª–∏ –µ—Å—Ç—å
      dataStore.payments[localId] = {
        chatId: chatId,
        amount: 169,
        status: 'pending',
        created: Date.now(),
        localId,
        remoteId: remoteTxId || null,
        rawCreateResponse: response.data
      };

      // –µ—Å–ª–∏ remoteId –µ—Å—Ç—å ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–µ–º—É (—á—Ç–æ–±—ã webhook'–∏ —Å remoteId —Ç–æ–∂–µ –º–∞–ø–∏–ª–∏—Å—å)
      if (remoteTxId) {
        dataStore.payments[remoteTxId] = dataStore.payments[localId];
      }

      saveData(dataStore);

      await bot.deleteMessage(chatId, loadingMsg.message_id).catch(() => {});

      if (redirectUrl) {
        const keyboard = {
          inline_keyboard: [
            [{ text: 'üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url: redirectUrl }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'menu' }]
          ]
        };

        bot.sendMessage(chatId, '‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –≥–æ—Ç–æ–≤–∞!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.', {
          reply_markup: keyboard
        });
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç redirect ‚Äî –ø–æ–∫–∞–∂–µ–º –∞–¥–º–∏–Ω–∫–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—à–∏–±–∫—É
        await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–∞–ø–ø–æ—Ä—Ç.');
        await bot.sendMessage(ADMIN_ID, `‚ö†Ô∏è –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è ${chatId} –Ω–µ –≤–µ—Ä–Ω—É–ª–∞—Å—å —Å—Å—ã–ª–∫–∞. –û—Ç–≤–µ—Ç Platega: ${JSON.stringify(response.data)}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error.response?.data || error.message);
      if (loadingMsg) await bot.deleteMessage(chatId, loadingMsg.message_id).catch(()=>{});
      bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–∞–ø–ø–æ—Ä—Ç.');
      await bot.sendMessage(ADMIN_ID, `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è ${chatId}: ${error.response?.data || error.message}`);
    }
  } else if (data === 'support') {
    const message = `üí¨ *–°–∞–ø–ø–æ—Ä—Ç*

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–æ–±–ª–µ–º–∞–º —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:
@chanceofrain`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'menu' }]
      ]
    };

    if (fs.existsSync(IMAGES.HELP)) {
      bot.sendPhoto(chatId, IMAGES.HELP, {
        caption: message,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      }).catch(err => {
        bot.sendMessage(chatId, message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      });
    } else {
      bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    }
  } else if (data === 'faq') {
    const message = `‚ùì *FAQ - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*

*–í–æ–ø—Ä–æ—Å:* –ö—É–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –µ—Å–ª–∏ —á—Ç–æ —Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –ø–æ–¥–ø–∏—Å–∫–æ–π?
*–û—Ç–≤–µ—Ç:* –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –ø–æ –≤–∞—à–µ–π –≤–∏–Ω–µ, –ø—Ä–æ–∏–∑–æ—à–µ–ª –∫–∞–∑—É—Å, –º—ã —Å–æ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –≤—Å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–ª–∏–º –µ—â–µ –Ω–∞ 1 –º–µ—Å—è—Ü –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–∞–ø–ø–æ—Ä—Ç

*–í–æ–ø—Ä–æ—Å:* –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É —Ö–æ—á—É, –Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥ —É–∂–µ –Ω–∞—Ö–æ–¥–∏–ª—Å—è –≤ —Å–µ–º–µ–π–Ω–æ–º –ø–ª–∞–Ω–µ?
*–û—Ç–≤–µ—Ç:* –≠—Ç–æ –Ω–µ —Ç–∞–∫–∞—è –±–æ–ª—å—à–∞—è –ø—Ä–æ–±–ª–µ–º–∞, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–∞–ø–ø–æ—Ä—Ç –∏ —É–≤–µ–¥–æ–º–∏—Ç–µ, —á—Ç–æ —É–∂–µ —Å–æ—Å—Ç–æ—è–ª–∏ —Ä–∞–Ω–µ–µ –≤ —Å–µ–º–µ–π–Ω–æ–º –ø–ª–∞–Ω–µ.

*–í–æ–ø—Ä–æ—Å:* –ß—Ç–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏?
*–û—Ç–≤–µ—Ç:* –ù–µ –±–æ–ª—å—à–µ –ø–æ–ª—É—á–∞—Å–∞, –æ–±—ã—á–Ω–æ 5-10 –º–∏–Ω—É—Ç`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'menu' }]
      ]
    };

    if (fs.existsSync(IMAGES.FAQ)) {
      bot.sendPhoto(chatId, IMAGES.FAQ, {
        caption: message,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      }).catch(err => {
        bot.sendMessage(chatId, message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      });
    } else {
      bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    }
  } else if (data === 'menu') {
    delete userStates[chatId];
    sendMainMenu(chatId);
  } else if (data.startsWith('complete_')) {
    if (chatId.toString() !== ADMIN_ID) {
      bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è');
      return;
    }

    const userId = data.replace('complete_', '');
    
    bot.sendMessage(userId, '‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≥–æ—Ç–æ–≤–∞!*\n\n–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Spotify! üéµ', {
      parse_mode: 'Markdown'
    });
    
    bot.sendMessage(chatId, `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
  }
});

/* --- –ü—Ä–∏—ë–º –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ --- */
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text && text.startsWith('/')) {
    return;
  }

  if (userStates[chatId]) {
    if (userStates[chatId].step === 'awaiting_login') {
      userStates[chatId].login = text;
      userStates[chatId].step = 'awaiting_password';
      bot.sendMessage(chatId, 'üîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Spotify:');
    } else if (userStates[chatId].step === 'awaiting_password') {
      const login = userStates[chatId].login;
      const password = text;

      const user = msg.from;
      const userContact = user.username ? `@${user.username}` : `${user.first_name || ''} ${user.last_name || ''}`.trim();

      const adminMessage = `üÜï *–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!*

üë§ *–ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞:* ${userContact}
üÜî *User ID:* ${chatId}

üìß *–õ–æ–≥–∏–Ω Spotify:* \`${login}\`
üîê *–ü–∞—Ä–æ–ª—å Spotify:* \`${password}\``;

      const keyboard = {
        inline_keyboard: [
          [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: `complete_${chatId}` }]
        ]
      };

      bot.sendMessage(ADMIN_ID, adminMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

      bot.sendMessage(chatId, '‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 5-10 –º–∏–Ω—É—Ç, –Ω–æ –Ω–µ –±–æ–ª–µ–µ –ø–æ–ª—É—á–∞—Å–∞.');

      delete userStates[chatId];
    }
  }
});

/* --- –í–µ–±—Ö—É–∫ –æ—Ç Platega --- */
/*
  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏/—Ñ–æ—Ä–º–∞—Ç–∞–º:
  - Platega –æ–±—ã—á–Ω–æ —à–ª—ë—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ X-MerchantId –∏ X-Secret. –ú—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º
    –≤–∞—Ä–∏–∞–Ω—Ç—ã 'x-merchantid' –∏ 'x-merchant-id' (–≤—Å–µ –∏–º–µ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ Node.js
    –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ lowercase).
  - Webhook'–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö (top-level id/status –∏–ª–∏
    –≤–ª–æ–∂–µ–Ω–Ω—ã–µ transaction), –ø–æ—ç—Ç–æ–º—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–µ–≤.
  - –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å webhook —Å –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞.
*/
app.post('/webhook/platega', async (req, res) => {
  try {
    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è)
    const headers = req.headers || {};
    const merchantHeader = headers['x-merchantid'] || headers['x-merchant-id'] || headers['x-merchant'];
    const secretHeader = headers['x-secret'] || headers['x-api-key'] || headers['x-secret-key'];

    if (!merchantHeader || !secretHeader || merchantHeader !== PLATEGA_SHOP_ID || secretHeader !== PLATEGA_API_KEY) {
      console.error('‚õî –ù–µ–≤–µ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è webhook:', { merchantHeader, secretHeader: secretHeader ? '[HIDDEN]' : 'missing' });
      // –í–∞–∂–Ω–æ: –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ–≤–µ—Ä–Ω—ã ‚Äî –≤–µ—Ä–Ω—É—Ç—å 401, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, —á—Ç–æ –ø—Ä–∏—à—ë–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      return res.status(401).json({ error: 'Unauthorized' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–µ–ª–∞
    const body = req.body || {};
    console.log('–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Platega:', JSON.stringify(body, null, 2));

    // –í—ã—Ç–∞—â–∏–º —Å—Ç–∞—Ç—É—Å –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ id'—à–Ω–∏–∫–∏ (—É—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ top-level, —Ç–∞–∫ –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–π transaction)
    const status = (body.status || body.transaction?.status || '').toString().toUpperCase();
    let txId = body.id || body.transaction?.id || body.transactionId || body.invoiceId || body.externalId || null;

    // –ù–∞–π–¥—ë–º chatId: –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤
    let chatId = null;

    // 1) –µ—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –ø–æ txId
    if (txId && dataStore.payments[txId]) {
      chatId = dataStore.payments[txId].chatId;
    }

    // 2) –µ—Å–ª–∏ –µ—Å—Ç—å payload (–º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ JSON.stringify({chatId}))
    if (!chatId) {
      const payloadRaw = body.payload || body.transaction?.payload || body.transaction?.externalId || null;
      if (payloadRaw) {
        try {
          const parsed = (typeof payloadRaw === 'string') ? JSON.parse(payloadRaw) : payloadRaw;
          if (parsed && parsed.chatId) {
            chatId = parsed.chatId;
            // –ï—Å–ª–∏ txId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ chatId –∏ pending —Å—Ç–∞—Ç—É—Å—É
            if (!txId) {
              for (const [k, v] of Object.entries(dataStore.payments)) {
                if (v.chatId == chatId && v.status === 'pending') {
                  txId = k;
                  break;
                }
              }
            }
          }
        } catch (e) {
          // payload –Ω–µ JSON ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        }
      }
    }

    // 3) –∑–∞–ø–∞—Å–Ω–æ–π –ø–æ–∏—Å–∫ –ø–æ —Å—É–º–º–µ –∏ pending-–∑–∞–ø–∏—Å—è–º
    if (!chatId && body.paymentDetails?.amount != null) {
      const amount = Number(body.paymentDetails.amount);
      for (const [k, v] of Object.entries(dataStore.payments)) {
        if (v.amount === amount && v.status === 'pending') {
          chatId = v.chatId;
          txId = k;
          break;
        }
      }
    }

    // –ï—Å–ª–∏ remote transaction id –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –º–∞–ø–ø–∏–Ω–≥: –Ω–∞–ø—Ä–∏–º–µ—Ä, Platega –º–æ–∂–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å remoteId
    const remoteIdCandidate = body.transaction?.id || body.transactionId || body.id || body.invoiceId || body.externalId || null;
    if (!txId && remoteIdCandidate && dataStore.payments[remoteIdCandidate]) {
      txId = remoteIdCandidate;
      chatId = dataStore.payments[txId].chatId;
    }

    // –ï—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚Äî idempotency (–Ω–∞ —Å–ª—É—á–∞–π –ø–æ–≤—Ç–æ—Ä–æ–≤)
    if (txId && dataStore.payments[txId] && dataStore.payments[txId].status === 'paid' && status === 'CONFIRMED') {
      console.log('Webhook duplicate CONFIRMED –¥–ª—è', txId);
      return res.status(200).json({ status: 'ok' });
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    if (status === 'CONFIRMED') {
      if (chatId) {
        // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        const storeKey = txId || `tx_unknown_${Date.now()}`;
        dataStore.payments[storeKey] = dataStore.payments[storeKey] || {};
        dataStore.payments[storeKey].chatId = chatId;
        dataStore.payments[storeKey].status = 'paid';
        dataStore.payments[storeKey].paidAt = Date.now();
        saveData(dataStore);

        // —Å–ø—Ä–æ—Å–∏–º –ª–æ–≥–∏–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.sendMessage(chatId, '‚úÖ *–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!*\n\nüìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ Spotify:', {
          parse_mode: 'Markdown'
        });

        userStates[chatId] = {
          step: 'awaiting_login',
          transactionId: storeKey
        };

        // –≤–µ—Ä–Ω—É—Ç—å 200 ‚Äî Platega –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –¥–æ—Å—Ç–∞–≤–∫—É
        return res.status(200).json({ status: 'ok' });
      } else {
        // –ù–µ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π webhook
        await bot.sendMessage(ADMIN_ID, `‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω webhook CONFIRMED, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ chatId –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\nbody: \`${JSON.stringify(body)}\``, { parse_mode: 'Markdown' });
        console.error('CONFIRMED, –Ω–æ chatId –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ—Ö—Ä–∞–Ω—è—é –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º "–Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é" –∑–∞–ø–∏—Å—å
        const unkKey = `unmapped_${Date.now()}`;
        dataStore.payments[unkKey] = { status: 'confirmed_unmapped', raw: body, created: Date.now() };
        saveData(dataStore);
        return res.status(200).json({ status: 'ok' });
      }
    } else if (status === 'CANCELED' || status === 'EXPIRED' || status === 'FAILED') {
      if (chatId && txId) {
        dataStore.payments[txId] = dataStore.payments[txId] || {};
        dataStore.payments[txId].status = status.toLowerCase();
        dataStore.payments[txId].updatedAt = Date.now();
        saveData(dataStore);

        await bot.sendMessage(chatId, `‚ùå –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: *${status}*. –ü–ª–∞—Ç—ë–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–∞–ø–ø–æ—Ä—Ç.`, {
          parse_mode: 'Markdown'
        });
      } else {
        await bot.sendMessage(ADMIN_ID, `‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω webhook ${status}, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–≤—è–∑–∞–Ω–Ω—ã–π chatId. body: \`${JSON.stringify(body)}\``, { parse_mode: 'Markdown' });
        const unkKey = `unmapped_${Date.now()}`;
        dataStore.payments[unkKey] = { status: status.toLowerCase(), raw: body, created: Date.now() };
        saveData(dataStore);
      }
      return res.status(200).json({ status: 'ok' });
    } else {
      // –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä PENDING) ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
      console.log('–ü–æ–ª—É—á–µ–Ω webhook —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º:', status);
      if (txId) {
        dataStore.payments[txId] = dataStore.payments[txId] || {};
        dataStore.payments[txId].status = (status || dataStore.payments[txId].status || 'pending').toLowerCase();
        saveData(dataStore);
      } else {
        const unkKey = `unmapped_${Date.now()}`;
        dataStore.payments[unkKey] = { status: status || 'unknown', raw: body, created: Date.now() };
        saveData(dataStore);
      }
      return res.status(200).json({ status: 'ok' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    // –ª—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å 200, —á—Ç–æ–±—ã Platega –Ω–µ —Å—á–∏—Ç–∞–ª–∞ –æ—à–∏–±–∫—É –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ (–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É)
    await bot.sendMessage(ADMIN_ID, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook Platega: ${error.message}`);
    return res.status(200).json({ status: 'ok' });
  }
});

app.get('/', (req, res) => {
  res.send('Blesk Spotify Bot is running!');
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`);
});

console.log('ü§ñ Blesk Spotify Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
